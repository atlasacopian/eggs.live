// prisma/schema.prisma
// Database schema for egg price tracking

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EggPrice {
  id            Int      @id @default(autoincrement())
  retailer      String
  storeId       String
  state         String
  city          String?
  zip           String?
  regularPrice  Float?   // Price of 12-count regular eggs
  organicPrice  Float?   // Price of 12-count organic eggs
  sampleSize    Int      @default(1)  // How many products were averaged
  scrapedAt     DateTime
  createdAt     DateTime @default(now())

  @@index([retailer, state])
  @@index([scrapedAt])
}

model RetailerAverage {
  id            Int      @id @default(autoincrement())
  retailer      String
  eggType       String   // "REGULAR" or "ORGANIC"
  averagePrice  Float
  dataPoints    Int      // Number of stores used in calculation
  statesCovered Int      // Number of states with data
  calculatedAt  DateTime
  createdAt     DateTime @default(now())

  @@index([retailer, eggType])
  @@index([calculatedAt])
}

model StateAverage {
  id            Int      @id @default(autoincrement())
  state         String
  eggType       String   // "REGULAR" or "ORGANIC"
  averagePrice  Float
  storesSampled Int      // Number of stores in this state
  calculatedAt  DateTime
  createdAt     DateTime @default(now())

  @@index([state, eggType])
  @@index([calculatedAt])
}

model NationalAverage {
  id            Int      @id @default(autoincrement())
  eggType       String   // "REGULAR" or "ORGANIC"
  averagePrice  Float
  retailerCount Int      // Number of retailers in average
  statesCovered Int      // Number of states with data
  calculatedAt  DateTime
  createdAt     DateTime @default(now())

  @@index([eggType])
  @@index([calculatedAt])
}

model ScrapingJob {
  id            Int      @id @default(autoincrement())
  startTime     DateTime
  endTime       DateTime
  totalAttempts Int
  successful    Int
  failed        Int
  statsJson     String   // Detailed stats as JSON
  createdAt     DateTime @default(now())
}
